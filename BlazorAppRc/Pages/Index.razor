@page "/"
@using BlazorAppRc.Models
@using BlazorAppRc.Services
@inject HttpClient Http
@inject BlazorAppRc.Services.AuthState AuthState
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthService AuthService


<h3 class="d-flex justify-content-between align-items-center mb-4">
    <span>Últimas publicaciones</span>
    <div>
        <button class="btn btn-secondary me-2" @onclick="MostrarModalFiltro">Filtros</button>
        @if (AuthState.IsAuthenticated)
        {
            <button class="btn btn-primary" @onclick="AbrirModal">Postear</button>
        }
    </div>
</h3>

<!-- Modal -->
@if (mostrarModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nueva publicación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" rows="5" maxlength="1000"
                        @bind="contenido"
                        @oninput="LimitarTexto"
                        placeholder="Escribe tu publicación (máx. 1000 caracteres)">
                    </textarea>
                     <div class="text-end text-muted mt-1">@contenido.Length / 1000</div>

                    <div class="mt-3">
                        <label class="form-label">Selecciona categorías</label>
                        <select id="selectCategorias"
                                multiple
                                class="form-select"
                                @ref="selectCategoriasRef"
                                @onchange="SeleccionarCategorias">
                            @foreach (var categoria in categoriasDisponibles)
                            {
                                <option value="@categoria.Id">@categoria.Name</option>
                            }
                        </select>

                        @if (categoriasSeleccionadas.Any())
                        {
                            <div class="mt-2">
                                @foreach (var categoria in categoriasSeleccionadas)
                                {
                                    <span class="badge bg-primary me-1">
                                        @categoria.Name
                                        <button type="button"
                                        class="btn-close btn-close-white ms-2"
                                        style="font-size: 0.6rem;"
                                        @onclick="() => EliminarCategoria(categoria.Id)">
                                        </button>
                                    </span>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="Publicar">Publicar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (pagedPosts == null)
{
    <p><em>Cargando publicaciones...</em></p>
}
else if (pagedPosts.Items.Count == 0)
{
    <p><em>No hay publicaciones para esta página.</em></p>
}
else
{
    @foreach (var post in pagedPosts.Items)
    {
        <div class="card mb-3 p-3 shadow-sm border rounded"
        style="cursor: pointer;"
        @onclick="() => IrADetalle(post.Id)">

            <div class="d-flex justify-content-between">
                <strong>@post.Username</strong>
                <small>@DateTime.Parse(post.Created).ToString("dd/MM")</small>
            </div>

            <p>
                @if (expandedPostId == post.Id)
                {
                    @post.PostContent
                }
                else
                {
                    @(post.PostContent.Length > 140
                                    ? post.PostContent.Substring(0, 140) + "..."
                                    : post.PostContent)
                }
            </p>

            @if (post.PostContent.Length > 140)
            {
                <span class="text-primary"
                role="button"
                style="cursor: pointer;"
                @onclick:stopPropagation
                @onclick="() => ToggleExpand(post.Id)">
                    @(expandedPostId == post.Id ? "Ver menos" : "Ver más")
                </span>
            }
        </div>
    }


    <div class="d-flex justify-content-center mt-3">
        <nav>
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="async () => await FirstPage()">«</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="async () => await ChangePage(pageNumber)">@pageNumber</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="async () => await LastPage()">»</button>
                </li>
            </ul>
        </nav>
    </div>
}

<!-- Modal de filtros -->
@if (mostrarModalFiltro)
{

    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filtrar publicaciones</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalFiltro"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Buscar texto</label>
                        <input class="form-control" @bind="filtro.SearchText" />
                    </div>
                    <div class="mb-3">
                        <label>Usuario</label>
                        <input class="form-control" @bind="filtro.Username" />
                    </div>
                    <div class="mb-3">
                        <label>Desde</label>
                        <InputDate class="form-control" @bind-Value="filtro.StartDate" />
                    </div>
                    <div class="mb-3">
                        <label>Hasta</label>
                        <InputDate class="form-control" @bind-Value="filtro.EndDate" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModalFiltro">Cancelar</button>
                    <button class="btn btn-primary" @onclick="AplicarFiltro">Aplicar</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private PagedResult<PostDto>? pagedPosts;
    private int currentPage = 1;
    private int pageSize = 4;
    private int totalPages => (int)Math.Ceiling((double)(pagedPosts?.TotalCount ?? 0) / pageSize);
    private int? expandedPostId = null;

    private bool mostrarModalFiltro = false;
    private PostFilterDto filtro = new() { Page = 1, PageSize = 4 };

    // Categories
    private List<CategoryDto> categoriasDisponibles = new();
    private List<CategoryDto> categoriasSeleccionadas = new();
    private ElementReference selectCategoriasRef;
    private string? errorMensaje;
    private bool categoriasCargadas = false;
    private List<int> selectedCategoryIds = new();

    //private bool jsInicializado = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !categoriasCargadas)
        {
            await CargarCategorias();
            categoriasCargadas = true;

            StateHasChanged();
        }
    }


    private async Task LoadPosts()
    {
        pagedPosts = await Http.GetFromJsonAsync<PagedResult<PostDto>>($"api/post/paged?page={currentPage}&pageSize={pageSize}");
    }

    private void ToggleExpand(int id)
    {
        expandedPostId = expandedPostId == id ? null : id;
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadPosts();
    }

    private async Task FirstPage()
    {
        if (currentPage > 1)
        {
            currentPage = 1;
            await LoadPosts();
        }
    }

    private async Task LastPage()
    {
        currentPage = totalPages;
        await LoadPosts();
    }

    private void IrADetalle(int postId)
    {
        Navigation.NavigateTo($"/post/{postId}");
    }

    // Publicar De Post
    private bool mostrarModal = false;
    private string contenido = string.Empty;
    private string? mensajeError;

    private void MostrarModal() => mostrarModal = true;

    private void CerrarModal()
    {
        mostrarModal = false;
        contenido = string.Empty;
        categoriasSeleccionadas.Clear();
    }

    private void LimitarTexto(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        contenido = value.Length > 1000 ? value.Substring(0, 1000) : value;
    }


    private async Task Publicar()
    {
        mensajeError = null;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt");
            if (string.IsNullOrEmpty(token))
            {
                mensajeError = "Debe iniciar sesión para publicar.";
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var postData = new
            {
                PostContent = contenido,
                UserId = AuthState.Id,
                imageUrl = "",
                CategoryIds = categoriasSeleccionadas.Select(c => c.Id).ToList()    
            };

            var response = await Http.PostAsJsonAsync("api/postcategories", postData);


            if (response.IsSuccessStatusCode)
            {

                CerrarModal(); // cerrar modal al publicar con éxito
                Navigation.NavigateTo("/", true);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensajeError = $"Error al publicar: {error}";
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error de red: {ex.Message}";
        }
        CerrarModal();
    }

    private async Task CargarPosts()
    {
        var response = await Http.PostAsJsonAsync("api/post/filter", filtro);
        if (response.IsSuccessStatusCode)
        {
            pagedPosts = await response.Content.ReadFromJsonAsync<PagedResult<PostDto>>() ?? new();
        }
    }

    private void MostrarModalFiltro() => mostrarModalFiltro = true;
    private void CerrarModalFiltro() => mostrarModalFiltro = false;

    private async Task AplicarFiltro()
    {
        mostrarModalFiltro = false;
        await CargarPosts();
    }

    private void AbrirModal()
    {
        // tu código actual de abrir modal para postear
        mostrarModal= true;
    }

    // Categories
    private async Task<bool> TryWithRefreshToken(Func<Task<bool>> apiCall)
    {
        var success = await apiCall();

        if (!success)
        {
            var refreshSuccess = await AuthService.RefreshTokenAsync();
            if (refreshSuccess)
            {
                return await apiCall(); // intenta de nuevo con token nuevo
            }
        }

        return false;
    }
    private async Task CargarCategorias()
    {
        errorMensaje = null;
        try
        {
            await TryWithRefreshToken(async () =>
            {
                 var token = await AuthService.GetJwtTokenAsync();
                 if (string.IsNullOrEmpty(token)) return false;
                    
                 Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                 var response = await Http.GetAsync("api/category");
                 if (!response.IsSuccessStatusCode) return false;
                 
                 categoriasDisponibles = await response.Content.ReadFromJsonAsync<List<CategoryDto>>() ?? new();
                  return true;

            });
        }        
        catch (Exception ex)
        {
            errorMensaje = "Error de red al obtener categorías.";
        }
    }

    private void EliminarCategoria(int id)
    {
        var cat = categoriasSeleccionadas.FirstOrDefault(c => c.Id == id);
        if (cat != null)
        {
            categoriasSeleccionadas.Remove(cat);
        }
    }


    private async Task SeleccionarCategorias()
    {
        try
            {
            var selectedValues = await JS.InvokeAsync<string[]>("getSelectedOptions");

            var ids = selectedValues
                .Where(x => int.TryParse(x, out _))
                .Select(int.Parse)
                .ToList();

            categoriasSeleccionadas = categoriasDisponibles
                .Where(c => ids.Contains(c.Id))
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al capturar categorías: {ex.Message}");
        }
    }

}
