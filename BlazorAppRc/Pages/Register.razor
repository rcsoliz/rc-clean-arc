
@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation


@using System.ComponentModel.DataAnnotations
@using BlazorAppRc.Models

<h3>Registro de usuario</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Username" class="form-label">Nombre de usuario</label>
        <InputText id="Username" class="form-control" @bind-Value="userModel.Username" />
        <ValidationMessage For="@(() => userModel.Username)" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">Correo electrónico</label>
        <InputText id="Email" class="form-control" @bind-Value="userModel.Email" />
        <ValidationMessage For="@(() => userModel.Email)" />
    </div>
    <div class="mb-3">
        <label for="Password" class="form-label">Contraseña</label>
        <InputText id="Password" type="password" class="form-control" @bind-Value="userModel.Password" />
        <ValidationMessage For="@(() => userModel.Password)" />
    </div>
    @* <button type="submit" class="btn btn-primary">Registrarse</button> *@
    <button type="submit" class="btn btn-primary me-2">Crear</button>
    <button type="button" class="btn btn-secondary" @onclick="VolverAlInicio">Cancelar</button>


 </EditForm>

@code {
    private UserModel userModel = new();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/authentication/register", userModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Usuario creado correctamente.";
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de red: {ex.Message}";
        }
    }

    private void VolverAlInicio()
    {
        Navigation.NavigateTo("/");
    }

}
